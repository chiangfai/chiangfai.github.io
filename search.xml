<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CentOS-7之Redis集群搭建]]></title>
    <url>%2F2018%2F07%2F18%2FCentOS-7%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[部署环境VMware： VMwareworkstation_full_12.1.0.2487.1453173744.exeCentOS 7： CentOS Linux release 7.5.1804 (Core) redis 安装下载解压拷贝redis1234[root@localhost ~]# mkdir /soft &amp;&amp; cd /soft[root@localhost soft]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz[root@localhost soft]# tar xzf redis-4.0.10.tar.gz[root@localhost soft]# mv redis-4.0.10 /usr/local/redis-4.0.10 &amp;&amp; cd /usr/local/redis-4.0.10 编译redis1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950[root@localhost redis-4.0.10]# makecd src &amp;&amp; make allmake[1]: 进入目录“/usr/local/redis-4.0.10/src” CC Makefile.depmake[1]: 离开目录“/usr/local/redis-4.0.10/src”make[1]: 进入目录“/usr/local/redis-4.0.10/src”rm -rf redis-server redis-sentinel redis-cli redis-benchmark redis-check-rdb redis-check-aof *.o *.gcda *.gcno *.gcov redis.info lcov-html Makefile.dep dict-benchmark(cd ../deps &amp;&amp; make distclean)make[2]: 进入目录“/usr/local/redis-4.0.10/deps”(cd hiredis &amp;&amp; make clean) &gt; /dev/null || true(cd linenoise &amp;&amp; make clean) &gt; /dev/null || true(cd lua &amp;&amp; make clean) &gt; /dev/null || true(cd jemalloc &amp;&amp; [ -f Makefile ] &amp;&amp; make distclean) &gt; /dev/null || true(rm -f .make-*)make[2]: 离开目录“/usr/local/redis-4.0.10/deps”(rm -f .make-*)echo STD=-std=c99 -pedantic -DREDIS_STATIC='' &gt;&gt; .make-settingsecho WARN=-Wall -W -Wno-missing-field-initializers &gt;&gt; .make-settingsecho OPT=-O2 &gt;&gt; .make-settingsecho MALLOC=jemalloc &gt;&gt; .make-settingsecho CFLAGS= &gt;&gt; .make-settingsecho LDFLAGS= &gt;&gt; .make-settingsecho REDIS_CFLAGS= &gt;&gt; .make-settingsecho REDIS_LDFLAGS= &gt;&gt; .make-settingsecho PREV_FINAL_CFLAGS=-std=c99 -pedantic -DREDIS_STATIC='' -Wall -W -Wno-missing-field-initializers -O2 -g -ggdb -I../deps/hiredis -I../deps/linenoise -I../deps/lua/src -DUSE_JEMALLOC -I../deps/jemalloc/include &gt;&gt; .make-settingsecho PREV_FINAL_LDFLAGS= -g -ggdb -rdynamic &gt;&gt; .make-settings(cd ../deps &amp;&amp; make hiredis linenoise lua jemalloc)make[2]: 进入目录“/usr/local/redis-4.0.10/deps”(cd hiredis &amp;&amp; make clean) &gt; /dev/null || true(cd linenoise &amp;&amp; make clean) &gt; /dev/null || true(cd lua &amp;&amp; make clean) &gt; /dev/null || true(cd jemalloc &amp;&amp; [ -f Makefile ] &amp;&amp; make distclean) &gt; /dev/null || true(rm -f .make-*)(echo "" &gt; .make-cflags)(echo "" &gt; .make-ldflags)MAKE hirediscd hiredis &amp;&amp; make staticmake[3]: 进入目录“/usr/local/redis-4.0.10/deps/hiredis”gcc -std=c99 -pedantic -c -O3 -fPIC -Wall -W -Wstrict-prototypes -Wwrite-strings -g -ggdb net.cmake[3]: gcc：命令未找到make[3]: *** [net.o] 错误 127make[3]: 离开目录“/usr/local/redis-4.0.10/deps/hiredis”make[2]: *** [hiredis] 错误 2make[2]: 离开目录“/usr/local/redis-4.0.10/deps”make[1]: [persist-settings] 错误 2 (忽略) CC adlist.o/bin/sh: cc: 未找到命令make[1]: *** [adlist.o] 错误 127make[1]: 离开目录“/usr/local/redis-4.0.10/src”make: *** [all] 错误 2 安装 gcc12345678910111213141516[root@localhost redis-4.0.10]# yum install gcc[root@localhost redis-4.0.10]# makecd src &amp;&amp; make allmake[1]: 进入目录“/usr/local/redis-4.0.10/src” CC Makefile.depmake[1]: 离开目录“/usr/local/redis-4.0.10/src”make[1]: 进入目录“/usr/local/redis-4.0.10/src” CC adlist.oIn file included from adlist.c:34:0:zmalloc.h:50:31: 致命错误：jemalloc/jemalloc.h：没有那个文件或目录 #include &lt;jemalloc/jemalloc.h&gt; ^编译中断。make[1]: *** [adlist.o] 错误 1make[1]: 离开目录“/usr/local/redis-4.0.10/src”make: *** [all] 错误 2 注：如果在make的时候不指定内存管理方式，使用make MALLOC=libc指令。malloc是管理内存碎片的。 12[root@localhost redis-4.0.10]# make MALLOC=libc[root@localhost redis-4.0.10]# make &amp; make install 创建 redis 节点12[root@localhost redis-4.0.10]# mkdir conf-cluster &amp;&amp; cd conf-cluster[root@localhost conf-cluster]# touch &#123;9000..9002&#125;.conf 修改{9000..9002}.conf文件。12345678port 9000bind 192.168.1.100daemonize yescluster-enabled yescluster-node-timeout 15000appendonly yespidfile /var/run/redis_9000.pidcluster-config-file nodes-9000.conf 启动｛9000..9002｝节点123[root@localhost conf-cluster]# redis-server 9000.conf[root@localhost conf-cluster]# redis-server 9001.conf[root@localhost conf-cluster]# redis-server 9002.conf 检查各 Redis 节点启动情况12[root@localhost conf-cluster]# ps -ef | grep redis //redis节点是否启动成功[root@localhost conf-cluster]# netstat -tnlp | grep redis //监听节点端口 安装ruby创建集群时需要用Ruby 运行redis-trib.rb. 1234[root@localhost conf-cluster]# yum -y install ruby ruby-devel rubygems rpm-build[root@localhost conf-cluster]# gem install redisERROR: Could not find a valid gem 'redis' (&gt;= 0), here is why: Unable to download data from https://rubygems.org/ - no such name (https://rubygems.org/latest_specs.4.8.gz) 修改 RubyGems 镜像123[root@localhost conf-cluster]# gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/https://gems.ruby-china.org/ added to sourceshttps://rubygems.org/ removed from sources 1234[root@localhost conf-cluster]# gem install redisFetching: redis-4.0.1.gem (100%)ERROR: Error installing redis: redis requires Ruby version &gt;= 2.2.2. Centos默认支持ruby到2.0.0，可gem 安装redis需要最低是2.2.2解决办法是 先安装rvm，再把ruby版本提升 升级ruby安装rvm(ruby版本控制)参考：https://blog.csdn.net/qq_37595946/article/details/77800147 https://ruby-china.org/wiki/rvm-guide12345[root@localhost conf-cluster]# gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3[root@localhost conf-cluster]# curl -L get.rvm.io | bash -s stable[root@localhost conf-cluster]# source /etc/profile.d/rvm.sh[root@localhost conf-cluster]# rvm list known[root@localhost conf-cluster]# rvm install 2.5.1 --disable-binary DNSChecking fallback: https://ftp.ruby-lang.org/pub/ruby/2.5/ruby-2.5.1.tar.bz2 /etc/resolv.conf123# Generated by NetworkManager+ 8.8.8.8nameserver 192.168.1.1 切换ruby版本12[root@localhost conf-cluster]# rvm use 2.5.1[root@localhost conf-cluster]# rvm remove 2.2.0 gem再次安装redis1234567[root@localhost conf-cluster]# gem install redisFetching: redis-4.0.1.gem (100%)Successfully installed redis-4.0.1Parsing documentation for redis-4.0.1Installing ri documentation for redis-4.0.1Done installing documentation for redis after 0 seconds1 gem installed 创建redis集群123456[root@localhost conf-cluster]# /usr/local/redis-4.0.10/src/redis-trib.rb create --replicas 1 192.168.1.100:9000 192.168.1.100:9001 192.168.1.100:9002&gt;&gt;&gt; Creating cluster*** ERROR: Invalid configuration for cluster creation.*** Redis Cluster requires at least 3 master nodes.*** This is not possible with 3 nodes and 1 replicas per node.*** At least 6 nodes are required. 注：集群至少需要3主3从6台服务器或进程。 复制虚拟机注： 复制虚拟机，记得修改虚拟机的MAC地址。 启动每台虚拟机的redis节点1[root@localhost conf-cluster]# redis-server &#123;9000..9002&#125;.conf 再次创建集群1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950[root@localhost conf-cluster]# /usr/local/redis-4.0.10/src/redis-trib.rb create --replicas 1 192.168.1.100:9000 192.168.1.100:9001 192.168.1.100:9002 192.168.1.101:9000 192.168.1.101:9001 192.168.1.101:9002&gt;&gt;&gt; Creating cluster&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Using 3 masters:192.168.1.100:9000192.168.1.101:9000192.168.1.100:9001Adding replica 192.168.1.101:9002 to 192.168.1.100:9000Adding replica 192.168.1.100:9002 to 192.168.1.101:9000Adding replica 192.168.1.101:9001 to 192.168.1.100:9001M: 40d42fcd808b073c839d0b767eb296853a1995ed 192.168.1.100:9000 slots:0-5460 (5461 slots) masterM: e1b5627a3f06d9dbf6ae75e26a3dfc3127018940 192.168.1.100:9001 slots:10923-16383 (5461 slots) masterS: 8a84e184bad311182898e7ee3f21280ed094a527 192.168.1.100:9002 replicates 7d002ccb55e1fac7ec6ae57b3ee710806bbe1b0dM: 7d002ccb55e1fac7ec6ae57b3ee710806bbe1b0d 192.168.1.101:9000 slots:5461-10922 (5462 slots) masterS: f77cc08cac4bc93c642820afb6ec9b42710e2f0a 192.168.1.101:9001 replicates e1b5627a3f06d9dbf6ae75e26a3dfc3127018940S: 407848979110a89f8804cf61a61c4386779a1a85 192.168.1.101:9002 replicates 40d42fcd808b073c839d0b767eb296853a1995edCan I set the above configuration? (type 'yes' to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join...&gt;&gt;&gt; Performing Cluster Check (using node 192.168.1.100:9000)M: 40d42fcd808b073c839d0b767eb296853a1995ed 192.168.1.100:9000 slots:0-5460 (5461 slots) master 1 additional replica(s)S: 8a84e184bad311182898e7ee3f21280ed094a527 192.168.1.100:9002 slots: (0 slots) slave replicates 7d002ccb55e1fac7ec6ae57b3ee710806bbe1b0dS: 407848979110a89f8804cf61a61c4386779a1a85 192.168.1.101:9002 slots: (0 slots) slave replicates 40d42fcd808b073c839d0b767eb296853a1995edS: f77cc08cac4bc93c642820afb6ec9b42710e2f0a 192.168.1.101:9001 slots: (0 slots) slave replicates e1b5627a3f06d9dbf6ae75e26a3dfc3127018940M: e1b5627a3f06d9dbf6ae75e26a3dfc3127018940 192.168.1.100:9001 slots:10923-16383 (5461 slots) master 1 additional replica(s)M: 7d002ccb55e1fac7ec6ae57b3ee710806bbe1b0d 192.168.1.101:9000 slots:5461-10922 (5462 slots) master 1 additional replica(s)[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered. 注：如果一直卡在Waiting for the cluster to join…请确保每台机器防火墙开启redis客户端端口及集群总线端口。例：如redis端口为9000，则集群总线端口为19000;集群总线端口为redis客户端连接的端口 + 10000。 防火墙操作打开端口--permanent参数代表永久开放123[root@localhost ~]# firewall-cmd --zone=public --add-port=9000/tcp --permanent[root@localhost ~]# firewall-cmd --zone=public --add-port=19000/tcp --permanent... 重启防火墙1[root@localhost ~]# firewall-cmd --reload 查看开放的端口12[root@localhost conf-cluster]# firewall-cmd --list-ports9000/tcp 9001/tcp 9002/tcp 19000/tcp 19001/tcp 19002/tcp 连接redis集群12[root@localhost conf-cluster]# redis-cli -h 192.168.1.100 -c -p 9000192.168.1.100:9000&gt; 必须要加：-c 参数 添加数据测试123[root@localhost conf-cluster]# redis-cli -h 192.168.1.100 -c -p 9000192.168.1.100:9000&gt; set title testclusterOK 在192.168.1.101 9002节点连接，获取数据。直接Redirected 从192.168.1.100:9000 获取数据。1234[root@localhost conf-cluster]# redis-cli -h 192.168.1.101 -c -p 9002192.168.1.101:9002&gt; get title-&gt; Redirected to slot [2217] located at 192.168.1.100:9000"testcluster" 至此，redis集群环境配置成功! 如果重启服务器后，再次执行redis-trib.rb会报错如下错误：[ERR] Node 192.168.1.80:6379 is not empty. Either the node already knows other nodes (check with CLUSTER NODES) or contains some key in database 0.解决方法：删除配置的cluster-config-file pidfile 和生成的dump.rdb ，然后重启redis服务，最后启动集群。 关闭redis节点端口关闭redis节点端口1[root@localhost conf-cluster]# redis-cli -h 192.168.1.100 -c -p 9000 shutdown 参考http://shift-alt-ctrl.iteye.com/blog/2284890https://www.cnblogs.com/subendong/p/7417601.html]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS 7</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS-7初识]]></title>
    <url>%2F2018%2F07%2F11%2FCentOS-7%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。每个版本的 CentOS都会获得十年的支持（通过安全更新方式）。新版本的 CentOS 大约每两年发行一次，而每个版本的 CentOS 会定期（大概每六个月）更新一次，以便支持新的硬件。这样，建立一个安全、低维护、稳定、高预测性、高重复性的 Linux 环境。 [1] CentOS是Community Enterprise Operating System的缩写。… 环境VMware 12 + CentOS 7搭建参考： 使用安装wget wget是一个从网络上自动下载文件的自由工具，支持通过HTTP、HTTPS、FTP三个最常见的TCP/IP协议下载，并可以使用HTTP代理。wget名称的由来是“World Wide Web”与“get”的结合。1yum install wget 修改yum镜像源123[root@localhost ~]# mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo // 备份系统自带镜像源[root@localhost ~]# wget -O /etc/yum.repos.d/CentOs-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo //下载aliyun镜像源[root@localhost ~]# yum clean all // 清除缓存 安装redis1[root@localhost ~]# yum install redis 注：yum如果无法安装redis，先添加epel源。yum install epel-release 启动/停止redis服务123[root@localhost ~]# redis-server[root@localhost ~]# service redis start/stop[root@localhost ~]# systemctl start/stop redis 连接redis1[root@localhost ~]# redis-cli 命令合集查看系统版本号12[root@localhost ~]# cat /etc/redhat-releaseCentOS Linux release 7.5.1804 (Core)]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS 7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL安装及简单使用]]></title>
    <url>%2F2018%2F07%2F09%2FMySQL%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[安装123$ brew remove mysql$ brew cleanup$ brew install mysql 服务启动/停止12$ brew services list //$ brew services start/stop mysql 常用命令语句查看帮助1$ mysqld --help --verbose | more //查看帮助，按空格下翻 修改密码1$ mysqladmin -u root -h localhost password password 登陆12$ mysql -uroot -p // 进入mysql控制台$ ****** 查看端口号1$ show global variables like 'port'; 操作数据库命令1234$ show databases; //$ create database [db_name] default character set utf8 collate utf8_general_ci;$ use [db_name]; //切换数据库$ drop database [db_name]; //删除 12345$ show tables;$ create table [table_name] (id int(10) NOT NULL AUTO_INCREMENT,PRIMARY KEY(id), user_name varchar(20));$ describe/desc [table_name]; //显示表结构$ drop table [table_name]; //删除表$ delete from [table_name]; //删除表中所有数据，不删除表结构。 12$ insert into [table_name](...) values(...);$ source /Users/chiangfai/sql/test.sql; 聚合函数数据表12345678910mysql&gt; select * from stu_scores;+----------+---------+-------+| stu_name | subject | score |+----------+---------+-------+| 张三 | 语文 | 80.5 || lisi | 数学 | 70 || 张三 | 数学 | 90 || lisi | 语文 | 80.5 |+----------+---------+-------+4 rows in set (0.00 sec) 列转行列转行12345678mysql&gt; select stu_name, max( case when subject='语文' then score end) as 语文, max(case when subject='数学' then score end) as 数学 from stu_scores group by stu_name;+----------+--------+--------+| stu_name | 语文 | 数学 |+----------+--------+--------+| lisi | 80.5 | 70 || 张三 | 80.5 | 90 |+----------+--------+--------+2 rows in set (0.00 sec) 列转行：利用max(case when then)max—聚合函数 取最大值(case course when ‘语文’ then score else 0 end) —判断as 语文—别名作为列名 group_concat（）合并字段合并字段显示1234567mysql&gt; select stu_name, group_concat(subject,":",score) as 成绩 from stu_scores group by stu_name;+----------+-----------------------+| stu_name | 成绩 |+----------+-----------------------+| lisi | 数学:70,语文:80.5 || 张三 | 语文:80.5,数学:90 |+----------+-----------------------+]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gradle构建SpringBoot多模块项目]]></title>
    <url>%2F2018%2F06%2F25%2FGradle%E6%9E%84%E5%BB%BASpringBoot%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[Gradle构建Spring Boot多模块项目准备工作：gradle工具 4.7 目录构建创建项目1$ mkdir st-gradle-multi-project &amp;&amp; cd st-gradle-multi-project gradle初始化1$ gradle init 创建多模块目录1$ mkdir projects &amp;&amp; cd projects 新建一个Spring Boot项目目录1$ mkdir -p app/source/&#123;java,test-java,test-resources&#125; app/config/site-data 新建一个Java项目结构目录1$ mkdir -p core/source/&#123;java,test-java,test-resources&#125; core/config 为每个项目模块新建build.gradle文件1$ echo 'dependencies&#123;&#125;' &gt; app/build.gradle &amp;&amp; cp app/build.gradle core/build.gradle 配置Gradle构建修改settings.gradle 确保app、core项目包含在多项目构建中 。配置参考：https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:settings_file Flat layoutsincludeFlat1includeFlat 'app', 'core' Hierarchical layoutsinclude1234file('projects').eachDir &#123; dir -&gt; include dir.name project(":$&#123;dir.name&#125;").projectDir = dir&#125; 修改st-gradle-multi-project/build.gradle文件路径：st-gradle-multi-project/build.gradle1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980buildscript &#123; repositories &#123; mavenCentral() maven &#123; url 'http://maven.aliyun.com/nexus/content/groups/public/' &#125; &#125; dependencies &#123; classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE' //classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE' &#125;&#125;//def javaProjects = getSubprojects()def bootProjects = [ 'app' ]configure(allprojects)&#123; apply plugin: 'eclipse' apply plugin: 'idea' version = '1.3.1.4'&#125;configure(subprojects) &#123; apply plugin: 'java' apply plugin: "io.spring.dependency-management" repositories &#123; maven &#123; url 'http://maven.aliyun.com/nexus/content/groups/public/' &#125; &#125; sourceSets &#123; main &#123; java &#123; srcDir 'source/java' &#125; resources &#123; srcDir 'config' &#125; &#125; test &#123; java &#123; srcDir 'source/test-java' &#125; resources &#123; srcDir 'source/test-resources' &#125; &#125; &#125; afterEvaluate &#123; dependencyManagement &#123; imports &#123; mavenBom 'io.spring.platform:platform-bom:Cairo-RELEASE' &#125; &#125; &#125; dependencies &#123; //compile 'org.slf4j:slf4j-api' //testCompile 'junit:junit' &#125; configurations &#123; //all*.exclude group: 'commons-logging', module: 'commons-logging' //all*.exclude group: 'log4j', module: 'log4j' &#125; task listJars(description: 'Display all compile jars.') &lt;&lt; &#123; configurations.compile.each &#123; File file -&gt; println file.name &#125; &#125;&#125;configure(bootProjects)&#123; apply plugin: 'org.springframework.boot'&#125;]]></content>
      <categories>
        <category>Gradle</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tesseract-ocr字库训练]]></title>
    <url>%2F2018%2F06%2F25%2Ftesseract-ocr%E5%AD%97%E5%BA%93%E8%AE%AD%E7%BB%83%2F</url>
    <content type="text"><![CDATA[Tesseract,一款由HP实验室开发由Google维护的开源OCR（Optical Character Recognition , 光学字符识别）引擎，与Microsoft Office Document Imaging（MODI）相比，我们可以不断的训练的库，使图像转换文本的能力不断增强；如果团队深度需要，还可以以它为模板，开发出符合自身需求的OCR引擎。Github：https://github.com/tesseract-ocr/tesseract 安装1$ brew install tesseract //只安装tesseract 1$ brew install --with-training-tools tesseract //安装训练工具 1$ brew install --all-languages tesseract //安装语言库 1$ brew install --all-languages --with-training-tools tesseract //安装语言库及训练工具 注意：安装训练库需安装 xquartz 。12345678MacBook-Air:~ chiangfai$ brew install --with-training-tools tesseractUpdating Homebrew...tesseract: XQuartz 2.7.11 (or newer) is required to install this formula. X11Requirement unsatisfied!You can install with Homebrew-Cask: brew cask install xquartzYou can download from: https://xquartz.macosforge.orgError: An unsatisfied requirement failed this build. xquartz安装1$ brew cask install xquartz 下载语言库https://github.com/tesseract-ocr/tessdata 库名 语言 eng English(英语) chi_sim Chinese - Simplified(中国-简体) chi_tra Chinese - Traditional(中国-繁体) ··· ··· 下载的语言库拷贝至目录 ==/usr/local/Cellar/tesseract/3.05.01/share/tessdata== 使用1$ tesseract --help //查看帮助信息 常用命令12345678// tesseract 图片绝对路径 输出文件（指定路径，默认当前命令路径输出txt文件）$ tesseract /Users/chiangfai/Pictures/demo.png result// 指定语言 （默认eng库）tesseract -l chi_sim /Users/chiangfai/Pictures/demo.png result// 指定使用多种语言tesseract -l chi_sim+eng /Users/chiangfai/Pictures/demo.png result 训练字库准备工作1. 确保安装训练工具1$ brew install --with-training-tools tesseract 2. 素材 素材图片如果是jpg，png非tiff格式，可以使用Preview -&gt; File -&gt; Export出tiff格式。 3. 下载 jTessBoxEditor jTessBoxEditor基于java虚拟机运行，确保电脑具备java运行环境。1$ java -Xms128m -Xmx1024m -jar /Users/chiangfai/Tools/jTessBoxEditor/jTessBoxEditor.jar 训练字库1.素材合成使用jTessBoxEditor将素材合成一个tif文件。 ==jTessBoxEditor菜单栏 -&gt; Tools -&gt; Merge TIFF==,如合成一个 multi.tif 文件。 2.在multi.tif新建sh文件。比如新建 tessdata-builder.sh 文件，内容如下：123456789101112131415161718192021222324252627282930313233343536373839# sh builder tessdatatemplate_name="multi"# genaretor .boxtesseract $template_name.tif $template_name batch.nochop makeboxwhile :do echo "char set right done? (y/n)" read after_update if [[ $after_update = "y" ]]; then break fidone#genaretor font_propertiesecho 'font 0 0 0 0 0' &gt; font_properties#genaretor .ttesseract $template_name.tif $template_name nobatch box.train#genaretor unicharsetunicharset_extractor $template_name.box#mftraining -F font_properties -U unicharset $template_name.trcntraining $template_name.tr#renamefor i in inttemp normproto pffmtable shapetable unicharset;domv $i $template_name.$idone// genaretor tessdatacombine_tessdata $template_name. 3.运行sh脚本1$ ./tessdata-builder.sh 12345MacBook-Air:tiff chiangfai$ ./tessdata-builder.shTesseract Open Source OCR Engine v3.05.01 with LeptonicaPage 1Page 2char set right done? (y/n) 4.确认使用jTessBoxEditor进行字符矫正完成。5.将生成的multi.traineddata拷贝。/usr/local/Cellar/tesseract/3.05.01/share/tessdata 附录tesseract -psm 参数1234567891011121314151617MacBook-Air:~ chiangfai$ tesseract --help-psmPage segmentation modes: 0 Orientation and script detection (OSD) only. 1 Automatic page segmentation with OSD. 2 Automatic page segmentation, but no OSD, or OCR. 3 Fully automatic page segmentation, but no OSD. (Default) 4 Assume a single column of text of variable sizes. 5 Assume a single uniform block of vertically aligned text. 6 Assume a single uniform block of text. 7 Treat the image as a single text line. 8 Treat the image as a single word. 9 Treat the image as a single word in a circle. 10 Treat the image as a single character. 11 Sparse text. Find as much text as possible in no particular order. 12 Sparse text with OSD. 13 Raw line. Treat the image as a single text line, bypassing hacks that are Tesseract-specific. 大致翻译123456789101112翻译（可能不是很准,最好看原文）： 0 定向脚本监测（OSD） 1 使用OSD自动分页 2 自动分页，但是不使用OSD或OCR（Optical Character Recognition，光学字符识别） 3 全自动分页，但是没有使用OSD（默认） 4 假设可变大小的一个文本列。 5 假设垂直对齐文本的单个统一块。 6 假设一个统一的文本块。 7 将图像视为单个文本行。 8 将图像视为单个词。 9 将图像视为圆中的单个词。 10 将图像视为单个字符。]]></content>
      <tags>
        <tag>tesseract-ocr</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lucene全文检索基本原理]]></title>
    <url>%2F2018%2F06%2F20%2FLucene%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Lucene</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FlexPaper初识]]></title>
    <url>%2F2018%2F06%2F19%2FFlexPaper%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[FlexPaper是一个开源轻量级的在浏览器上显示各种文档的组件，被设计用来与PDF2SWF一起使用， 使在Flex中显示PDF成为可能，而这个过程并无需PDF软件环境的支持。它可以被当做Flex的库来使用。 下载官网地址：https://flowpaper.com注：官网不再提供FlexPaper下载，更名为flowPaper。 FlexPaper 1.5.1及 FlexPaper 2.2.4下载地址：http://www.veryhuo.com/down/html/177274.html 预览浏览器打开index.html 可能遇到的问题FlexPaper 1.5.1运行index.html；右上角一直loading，无法显示swf。 原因：Flexpaper还没获得Adobe Flash的信任。前往Global Security Settings panel为例子所在文件夹添加信任。 FlexPaper 2.2.4运行index.html。提示：You are trying to use FlexPaper from a local directory. 解决办法：将例子部署至Tomcat或其他服务器环境即可。 Your browser is not compatible with FlexPaper… 进入chrome://settings/content/flash，将对应网站加入允许列表。 http://192.168.10.106:8010/]]></content>
      <tags>
        <tag>FlexPaper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程池]]></title>
    <url>%2F2018%2F06%2F13%2F%E7%BA%BF%E7%A8%8B%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[new Thread弊端： 1.每次new Thread对象，性能差。 2.线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。 3.缺乏更多功能，，如定时执行、定期执行、线程中断。 线程池优点： 1.重用存在线程，减少对象创建、消亡的开销，性能佳。 2.可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。 3.提供定时执行、定期执行、单线程、并发数控制等功能。 newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。1234567891011121314151617public static void main(String[] args) &#123; ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; fixedThreadPool.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println(index); Thread.sleep(2000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125;&#125; 因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。 定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。可参考PreloadDataCache。 newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。12345678910111213public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.schedule(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println("hi, scheduledThreadPool."); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;, 3, TimeUnit.SECONDS);&#125; 表示延迟3秒执行。 123456789public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123; @Override public void run() &#123; System.out.println("hi , scheduleAtFixedRate"); &#125; &#125;, 1, 2, TimeUnit.SECONDS);&#125; 表示延迟1秒后每2秒执行一次。 newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。1234567891011121314151617public static void main(String[] args) &#123; ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor(); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; singleThreadExecutor.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println(index); Thread.sleep(3000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125;&#125; 顺序执行各个任务。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git提交本地项目到github]]></title>
    <url>%2F2018%2F06%2F13%2Fgit%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[如何将本地项目提交github 进入项目目录1$ cd Code/umi-demo git初始化，生成.git隐藏文件夹1$ git init 在github创建与项目同名repositoryCreate New Repository 使本地库关联远程库1$ git remote add origin git@github.com:chiangfai/umi-demo.git 将本地项目文件添加到本地缓存库及提交到本地分支12$ git add . // .代表所有文件$ git commit -m "commit all file" //将所有文件提交到本地库中 提交本地到远程库12$ git push -u origin master //第一次提交 添加命令参数 -u 确保关联本地库和远程库$ git push origin master //非第一次提交使用此命令即可]]></content>
      <categories>
        <category>git</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试汇总]]></title>
    <url>%2F2018%2F06%2F09%2FJava%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[… JAVA基础]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客自定义]]></title>
    <url>%2F2018%2F06%2F08%2Fhexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%2F</url>
    <content type="text"><![CDATA[头像旋转 统计站点运行时长 页脚跳动❤️ 头像旋转next/source/css/_custom/_custom.styl12345678.site-author-image &#123; border-radius: 50%; transition: transform 1.0s ease-out;&#125;.site-author-image:hover &#123; transform: rotate(360deg);&#125; 站点运行时长HTML1&lt;div id="site-currentTime"&gt;&lt;/div&gt; /next/layout/_custom/sidebar.swig1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;script type="text/javascript"&gt; function setSiteCurrentTime() &#123; window.setTimeout("setSiteCurrentTime()", 1000); var second = 1000; // 秒 var minute = second * 60; // 分 var hour = minute * 60; // 时 var day = hour * 24; // 天 var year = day * 365; // 年 var currentDate = new Date(); // 获取当前时间 var currentYear = currentDate.getFullYear(); var currentMonth = currentDate.getMonth() + 1; var currentDay = currentDate.getDate(); var currentHour = currentDate.getHours(); var currentMinute = currentDate.getMinutes(); var currentSecond = currentDate.getSeconds(); // //2018-05-31 var birth = Date.UTC(2018, 05, 31, 12, 00, 00); // 北京时间2016-12-1 00:00:00 var now = Date.UTC(currentYear, currentMonth, currentDay, currentHour, currentMinute, currentSecond); var diff = now - birth; var diffYear = Math.floor(diff/year); var diffDay = Math.floor((diff/day) - diffYear*365); var diffHour = Math.floor((diff - (diffYear*365+diffDay)*day)/hour); var diffMinute = Math.floor((diff-(diffYear*365+diffDay)*day - diffHour*hour)/minute); var diffSecond = Math.floor((diff - (diffYear*365+diffDay)*day - diffHour*hour - diffMinute*minute)/second); document.getElementById('site-currentTime').innerHTML = formartHTML(diffYear, diffDay , diffHour, diffMinute, diffSecond); &#125; function formartHTML(year, day, hour, minute, second) &#123; var time = '已运行', y = year + ' 年 ', d = day + ' 天 ', h = hour + ' 时 ', m = minute + ' 分 ', s = second+ ' 秒 '; if( year &gt; 0 ) &#123; time += y; &#125; time += d + h + m + s; var html = '&lt;i class="fa fa-hourglass-half"/&gt;' html += '&lt;span&gt;' + time + '&lt;/span&gt;'; return html; // return html + '已运行 ' + year + ' 年 ' + day + ' 天 '+ hour + ' 时 ' + minute + ' 分 ' + second+ ' 秒 '; &#125; setSiteCurrentTime();&lt;/script&gt; 页脚跳动❤️next/source/css/_custom/_custom.styl12345678910with-love &#123; animation: heartAnimate 1.33s ease-in-out infinite ;&#125;@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[站点运行时长统计]]></title>
    <url>%2F2018%2F06%2F08%2F%E7%AB%99%E7%82%B9%E8%BF%90%E8%A1%8C%E6%97%B6%E9%95%BF%2F</url>
    <content type="text"><![CDATA[JS统计站点运行时长 HTML12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #site-currentTime &#123; border: 1px solid red; height: 50px; width: 200px; margin: 0 auto; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="site-currentTime"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; function setSiteCurrentTime() &#123; window.setTimeout("setSiteCurrentTime()", 1000); var second = 1000; // 秒 var minute = second * 60; // 分 var hour = minute * 60; // 时 var day = hour * 24; // 天 var year = day * 365; // 年 var currentDate = new Date(); // 获取当前时间 var currentYear = currentDate.getFullYear(); var currentMonth = currentDate.getMonth() + 1; var currentDay = currentDate.getDate(); var currentHour = currentDate.getHours(); var currentMinute = currentDate.getMinutes(); var currentSecond = currentDate.getSeconds(); var birth = Date.UTC(2018, 06, 07, 12, 00, 00); // 北京时间2016-12-1 00:00:00 var now = Date.UTC(currentYear, currentMonth, currentDay, currentHour, currentMinute, currentSecond); var diff = now - birth; var diffYear = Math.floor(diff/year); var diffDay = Math.floor((diff/day) - diffYear*365); var diffHour = Math.floor((diff - (diffYear*365+diffDay)*day)/hour); var diffMinute = Math.floor((diff-(diffYear*365+diffDay)*day - diffHour*hour)/minute); var diffSecond = Math.floor((diff - (diffYear*365+diffDay)*day - diffHour*hour - diffMinute*minute)/second); document.getElementById('site-currentTime').innerHTML = formartHTML(diffYear, diffDay, diffHour, diffMinute, diffSecond); &#125; function formartHTML(year, day, hour, minute, second) &#123; return '已运行' + year + ' 年 ' + day + ' 天 '+ hour + ' 时 ' + minute + ' 分 ' + second + ' 秒 '; &#125; setSiteCurrentTime(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>Front End</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo markdown写作样式]]></title>
    <url>%2F2018%2F06%2F07%2Fmarkdown%E5%86%99%E4%BD%9C%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[hexo好看写作… 代码块 [language] [title] [url] [link-text] test百度123funtion test() &#123; console.log('test');&#125; []百度123funtion test() &#123; console.log(&apos;test&apos;);&#125; 行代码 diff12- theme: landscape+ theme: next 标签 修改主题配置 123456789101112note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: flat icons: true border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 hello infohello defaultprimarysuccessdangerdanger no-icon]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sitesMore info: Deployment]]></content>
  </entry>
</search>
