<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Lucene全文检索基本原理]]></title>
    <url>%2F2018%2F06%2F20%2FLucene%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Lucene</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FlexPaper初识]]></title>
    <url>%2F2018%2F06%2F19%2FFlexPaper%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[FlexPaper是一个开源轻量级的在浏览器上显示各种文档的组件，被设计用来与PDF2SWF一起使用， 使在Flex中显示PDF成为可能，而这个过程并无需PDF软件环境的支持。它可以被当做Flex的库来使用。 下载官网地址：https://flowpaper.com注：官网不再提供FlexPaper下载，更名为flowPaper。 FlexPaper 1.5.1及 FlexPaper 2.2.4下载地址：http://www.veryhuo.com/down/html/177274.html 预览浏览器打开index.html 可能遇到的问题FlexPaper 1.5.1运行index.html；右上角一直loading，无法显示swf。 原因：Flexpaper还没获得Adobe Flash的信任。前往Global Security Settings panel为例子所在文件夹添加信任。 FlexPaper 2.2.4运行index.html。提示：You are trying to use FlexPaper from a local directory. 解决办法：将例子部署至Tomcat或其他服务器环境即可。 Your browser is not compatible with FlexPaper… 进入chrome://settings/content/flash，将对应网站加入允许列表。 http://192.168.10.106:8010/]]></content>
      <tags>
        <tag>FlexPaper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程池]]></title>
    <url>%2F2018%2F06%2F13%2F%E7%BA%BF%E7%A8%8B%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[new Thread弊端： 1.每次new Thread对象，性能差。 2.线程缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或oom。 3.缺乏更多功能，，如定时执行、定期执行、线程中断。 线程池优点： 1.重用存在线程，减少对象创建、消亡的开销，性能佳。 2.可有效控制最大并发线程数，提高系统资源的使用率，同时避免过多资源竞争，避免堵塞。 3.提供定时执行、定期执行、单线程、并发数控制等功能。 newCachedThreadPool创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。 newFixedThreadPool创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。1234567891011121314151617public static void main(String[] args) &#123; ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; fixedThreadPool.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println(index); Thread.sleep(2000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125;&#125; 因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。 定长线程池的大小最好根据系统资源进行设置。如Runtime.getRuntime().availableProcessors()。可参考PreloadDataCache。 newScheduledThreadPool创建一个定长线程池，支持定时及周期性任务执行。12345678910111213public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.schedule(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println("hi, scheduledThreadPool."); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;, 3, TimeUnit.SECONDS);&#125; 表示延迟3秒执行。 123456789public static void main(String[] args) &#123; ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5); scheduledThreadPool.scheduleAtFixedRate(new Runnable() &#123; @Override public void run() &#123; System.out.println("hi , scheduleAtFixedRate"); &#125; &#125;, 1, 2, TimeUnit.SECONDS);&#125; 表示延迟1秒后每2秒执行一次。 newSingleThreadExecutor创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。1234567891011121314151617public static void main(String[] args) &#123; ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor(); for (int i = 0; i &lt; 10; i++) &#123; final int index = i; singleThreadExecutor.execute(new Runnable() &#123; @Override public void run() &#123; try &#123; System.out.println(index); Thread.sleep(3000); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); &#125;&#125; 顺序执行各个任务。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git提交本地项目到github]]></title>
    <url>%2F2018%2F06%2F13%2Fgit%E6%8F%90%E4%BA%A4%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E5%88%B0github%2F</url>
    <content type="text"><![CDATA[如何将本地项目提交github 进入项目目录1$ cd Code/umi-demo git初始化，生成.git隐藏文件夹1$ git init 在github创建与项目同名repositoryCreate New Repository 使本地库关联远程库1$ git remote add origin git@github.com:chiangfai/umi-demo.git 将本地项目文件添加到本地缓存库及提交到本地分支12$ git add . // .代表所有文件$ git commit -m "commit all file" //将所有文件提交到本地库中 提交本地到远程库12$ git push -u origin master //第一次提交 添加命令参数 -u 确保关联本地库和远程库$ git push origin master //非第一次提交使用此命令即可]]></content>
      <categories>
        <category>git</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试汇总]]></title>
    <url>%2F2018%2F06%2F09%2FJava%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[… JAVA基础]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客自定义]]></title>
    <url>%2F2018%2F06%2F08%2Fhexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%2F</url>
    <content type="text"><![CDATA[头像旋转 统计站点运行时长 页脚跳动❤️ 头像旋转next/source/css/_custom/_custom.styl12345678.site-author-image &#123; border-radius: 50%; transition: transform 1.0s ease-out;&#125;.site-author-image:hover &#123; transform: rotate(360deg);&#125; 站点运行时长HTML1&lt;div id="site-currentTime"&gt;&lt;/div&gt; /next/layout/_custom/sidebar.swig1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;script type="text/javascript"&gt; function setSiteCurrentTime() &#123; window.setTimeout("setSiteCurrentTime()", 1000); var second = 1000; // 秒 var minute = second * 60; // 分 var hour = minute * 60; // 时 var day = hour * 24; // 天 var year = day * 365; // 年 var currentDate = new Date(); // 获取当前时间 var currentYear = currentDate.getFullYear(); var currentMonth = currentDate.getMonth() + 1; var currentDay = currentDate.getDate(); var currentHour = currentDate.getHours(); var currentMinute = currentDate.getMinutes(); var currentSecond = currentDate.getSeconds(); // //2018-05-31 var birth = Date.UTC(2018, 05, 31, 12, 00, 00); // 北京时间2016-12-1 00:00:00 var now = Date.UTC(currentYear, currentMonth, currentDay, currentHour, currentMinute, currentSecond); var diff = now - birth; var diffYear = Math.floor(diff/year); var diffDay = Math.floor((diff/day) - diffYear*365); var diffHour = Math.floor((diff - (diffYear*365+diffDay)*day)/hour); var diffMinute = Math.floor((diff-(diffYear*365+diffDay)*day - diffHour*hour)/minute); var diffSecond = Math.floor((diff - (diffYear*365+diffDay)*day - diffHour*hour - diffMinute*minute)/second); document.getElementById('site-currentTime').innerHTML = formartHTML(diffYear, diffDay , diffHour, diffMinute, diffSecond); &#125; function formartHTML(year, day, hour, minute, second) &#123; var time = '已运行', y = year + ' 年 ', d = day + ' 天 ', h = hour + ' 时 ', m = minute + ' 分 ', s = second+ ' 秒 '; if( year &gt; 0 ) &#123; time += y; &#125; time += d + h + m + s; var html = '&lt;i class="fa fa-hourglass-half"/&gt;' html += '&lt;span&gt;' + time + '&lt;/span&gt;'; return html; // return html + '已运行 ' + year + ' 年 ' + day + ' 天 '+ hour + ' 时 ' + minute + ' 分 ' + second+ ' 秒 '; &#125; setSiteCurrentTime();&lt;/script&gt; 页脚跳动❤️next/source/css/_custom/_custom.styl12345678910with-love &#123; animation: heartAnimate 1.33s ease-in-out infinite ;&#125;@keyframes heartAnimate &#123; 0%,100%&#123;transform:scale(1);&#125; 10%,30%&#123;transform:scale(0.9);&#125; 20%,40%,60%,80%&#123;transform:scale(1.1);&#125; 50%,70%&#123;transform:scale(1.1);&#125;&#125;]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[站点运行时长统计]]></title>
    <url>%2F2018%2F06%2F08%2F%E7%AB%99%E7%82%B9%E8%BF%90%E8%A1%8C%E6%97%B6%E9%95%BF%2F</url>
    <content type="text"><![CDATA[JS统计站点运行时长 HTML12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #site-currentTime &#123; border: 1px solid red; height: 50px; width: 200px; margin: 0 auto; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="site-currentTime"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt; function setSiteCurrentTime() &#123; window.setTimeout("setSiteCurrentTime()", 1000); var second = 1000; // 秒 var minute = second * 60; // 分 var hour = minute * 60; // 时 var day = hour * 24; // 天 var year = day * 365; // 年 var currentDate = new Date(); // 获取当前时间 var currentYear = currentDate.getFullYear(); var currentMonth = currentDate.getMonth() + 1; var currentDay = currentDate.getDate(); var currentHour = currentDate.getHours(); var currentMinute = currentDate.getMinutes(); var currentSecond = currentDate.getSeconds(); var birth = Date.UTC(2018, 06, 07, 12, 00, 00); // 北京时间2016-12-1 00:00:00 var now = Date.UTC(currentYear, currentMonth, currentDay, currentHour, currentMinute, currentSecond); var diff = now - birth; var diffYear = Math.floor(diff/year); var diffDay = Math.floor((diff/day) - diffYear*365); var diffHour = Math.floor((diff - (diffYear*365+diffDay)*day)/hour); var diffMinute = Math.floor((diff-(diffYear*365+diffDay)*day - diffHour*hour)/minute); var diffSecond = Math.floor((diff - (diffYear*365+diffDay)*day - diffHour*hour - diffMinute*minute)/second); document.getElementById('site-currentTime').innerHTML = formartHTML(diffYear, diffDay, diffHour, diffMinute, diffSecond); &#125; function formartHTML(year, day, hour, minute, second) &#123; return '已运行' + year + ' 年 ' + day + ' 天 '+ hour + ' 时 ' + minute + ' 分 ' + second + ' 秒 '; &#125; setSiteCurrentTime(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>Front End</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo markdown写作样式]]></title>
    <url>%2F2018%2F06%2F07%2Fmarkdown%E5%86%99%E4%BD%9C%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[hexo好看写作… 代码块 [language] [title] [url] [link-text] test百度123funtion test() &#123; console.log('test');&#125; []百度123funtion test() &#123; console.log(&apos;test&apos;);&#125; 行代码 diff12- theme: landscape+ theme: next 标签 修改主题配置 123456789101112note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. style: flat icons: true border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0 hello infohello defaultprimarysuccessdangerdanger no-icon]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sitesMore info: Deployment]]></content>
  </entry>
</search>
